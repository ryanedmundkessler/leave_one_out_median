
  ___  ____  ____  ____  ____ (R)
 /__    /   ____/   /   ____/
___/   /   /___/   /   /___/   15.1   Copyright 1985-2017 StataCorp LLC
  Statistics/Data Analysis            StataCorp
                                      4905 Lakeway Drive
     Special Edition                  College Station, Texas 77845 USA
                                      800-STATA-PC        http://www.stata.com
                                      979-696-4600        stata@stata.com
                                      979-696-4601 (fax)

110-user Stata network perpetual license:
       Serial number:  401506201178
         Licensed to:  Brown University
                       Brown University

Notes:
      1.  Stata is running in batch mode.
      2.  Unicode is supported; see help unicode_advice.
      3.  Maximum number of variables is set to 5000; see help set_maxvar.

. do "basic_functionality.do" 

. version 15

. adopath + ../../ado
  [1]  (BASE)      "/Applications/Stata/ado/base/"
  [2]  (SITE)      "/Applications/ado/"
  [3]              "."
  [4]  (PERSONAL)  "/Users/ryankessler/Library/Application Support/Stata/ado/pe
> rsonal/"
  [5]  (PLUS)      "/Users/ryankessler/Library/Application Support/Stata/ado/pl
> us/"
  [6]  (OLDPLACE)  "~/ado/"
  [7]              "../../ado"

. 
. program main
  1.     test_odd_number_obs
  2.     test_even_number_obs
  3.     test_odd_number_obs_by_group
  4.     test_odd_number_even_by_group
  5. end

. 
. program test_odd_number_obs
  1.     matrix test_col = (1 \ 2 \ 3 \ 4 \ 5)
  2.     matrix correct_looms = (3.5 \ 3.5 \ 3 \ 2.5 \ 2.5)  
  3.     test_loom, test_col(test_col) correct_looms(correct_looms)
  4. 
.     matrix test_col = (1 \ 3 \ 3 \ 4 \ 5)
  5.     matrix correct_looms = (3.5 \ 3.5 \ 3.5 \ 3 \ 3)    
  6.     test_loom, test_col(test_col) correct_looms(correct_looms)
  7. 
.     matrix test_col = (1 \ 2 \ 3 \ 3 \ 5)
  8.     matrix correct_looms = (3 \ 3 \ 2.5 \ 2.5 \ 2.5)    
  9.     test_loom, test_col(test_col) correct_looms(correct_looms)
 10. 
.     matrix test_col = (1 \ 3 \ 3 \ 3 \ 5)
 11.     matrix correct_looms = (3 \ 3 \ 3 \ 3 \ 3)  
 12.     test_loom, test_col(test_col) correct_looms(correct_looms)
 13. 
.     matrix test_col = (1 \ 2 \ . \ 4 \ 5)
 14.     matrix correct_looms = (4 \ 4 \ 3 \ 2 \ 2)  
 15.     test_loom, test_col(test_col) correct_looms(correct_looms)
 16. 
.     matrix test_col = (1 \ 2 \ 0 \ 4 \ 5)
 17.     matrix correct_looms = (3 \ 2.5 \ 3 \ 1.5 \ 1.5)    
 18.     test_loom, test_col(test_col) correct_looms(correct_looms)
 19. 
.     matrix test_col = (1 \ 2 \ -0.5 \ 4 \ 5)
 20.     matrix correct_looms = (3 \ 2.5 \ 3 \ 1.5 \ 1.5)
 21.     test_loom, test_col(test_col) correct_looms(correct_looms)
 22. 
.     matrix test_col = (5 \ 3 \ 4 \ 1 \ 2)
 23.     matrix correct_looms = (2.5 \ 3 \ 2.5 \ 3.5 \ 3.5)  
 24.     test_loom, test_col(test_col) correct_looms(correct_looms)
 25. end

. 
. program test_odd_number_obs_by_group
  1.     qui set obs 10
  2.     qui gen groupvar = 1 if _n <= 5
  3.     qui replace groupvar = 2 if _n > 5
  4.     
.     matrix test_col1 = (1 \ 2 \ 3 \ 4 \ 5)
  5.     matrix test_col2 = (1 \ 2 \ 3 \ 4 \ 5)
  6.     matrix correct_looms1 = (3.5 \ 3.5 \ 3 \ 2.5 \ 2.5) 
  7.     matrix correct_looms2 = (3.5 \ 3.5 \ 3 \ 2.5 \ 2.5) 
  8.     matrix test_col = (test_col1 \ test_col2)
  9.     matrix correct_looms = (correct_looms1 \ correct_looms2)
 10.     test_loom, test_col(test_col) correct_looms(correct_looms) by(groupvar
> )
 11. 
.     matrix test_col1 = (1 \ 2 \ . \ 4 \ 5)
 12.     matrix test_col2 = (1 \ 2 \ 3 \ . \ 5)
 13.     matrix correct_looms1 = (4 \ 4 \ 3 \ 2 \ 2)
 14.     matrix correct_looms2 = (3 \ 3 \ 2 \ 2.5 \ 2)
 15.     matrix test_col = (test_col1 \ test_col2)
 16.     matrix correct_looms = (correct_looms1 \ correct_looms2)
 17.     test_loom, test_col(test_col) correct_looms(correct_looms) by(groupvar
> )
 18. 
.     matrix test_col1 = (5 \ 3 \ 4 \ 1 \ 2)
 19.     matrix test_col2 = (1 \ 3 \ 3 \ 3 \ 5)
 20.     matrix correct_looms1 = (2.5 \ 3 \ 2.5 \ 3.5 \ 3.5) 
 21.     matrix correct_looms2 = (3 \ 3 \ 3 \ 3 \ 3) 
 22.     matrix test_col = (test_col1 \ test_col2)
 23.     matrix correct_looms = (correct_looms1 \ correct_looms2)
 24.     test_loom, test_col(test_col) correct_looms(correct_looms) by(groupvar
> )
 25. 
.     matrix test_col1 = (1 \ 3 \ 3 \ 4 \ 5)
 26.     matrix test_col2 = (1 \ 2 \ 3 \ 3 \ 5)
 27.     matrix correct_looms1 = (3.5 \ 3.5 \ 3.5 \ 3 \ 3)   
 28.     matrix correct_looms2 = (3 \ 3 \ 2.5 \ 2.5 \ 2.5)   
 29.     matrix test_col = (test_col1 \ test_col2)
 30.     matrix correct_looms = (correct_looms1 \ correct_looms2)
 31.     test_loom, test_col(test_col) correct_looms(correct_looms) by(groupvar
> )
 32. 
.     drop groupvar
 33. end

. 
. program test_even_number_obs
  1.     matrix test_col = (1 \ 2 \ 3 \ 4 \ 5 \ 6)
  2.     matrix correct_looms = (4 \ 4 \ 4 \ 3 \ 3 \ 3)  
  3.     test_loom, test_col(test_col) correct_looms(correct_looms)
  4. 
.     matrix test_col = (1 \ 2 \ . \ 4 \ . \ 6)
  5.     matrix correct_looms = (4 \ 4 \ 3 \ 2 \ 3 \ 2)  
  6.     test_loom, test_col(test_col) correct_looms(correct_looms)
  7. 
.     matrix test_col = (1 \ 2 \ 3 \ 3 \ 5 \ 6)
  8.     matrix correct_looms = (3 \ 3 \ 3 \ 3 \ 3 \ 3)
  9.     test_loom, test_col(test_col) correct_looms(correct_looms)
 10. 
.     matrix test_col = (1 \ 2 \ 2 \ 4 \ 5 \ 6)
 11.     matrix correct_looms = (4 \ 4 \ 4 \ 2 \ 2 \ 2)  
 12.     test_loom, test_col(test_col) correct_looms(correct_looms)
 13. 
.     matrix test_col = (1 \ 2 \ 3 \ 4 \ 4 \ 6)
 14.     matrix correct_looms = (4 \ 4 \ 4 \ 3 \ 3 \ 3)
 15.     test_loom, test_col(test_col) correct_looms(correct_looms)
 16. 
.     matrix test_col = (6 \ 4 \ 5 \ 2 \ 1 \ 3)
 17.     matrix correct_looms = (3 \ 3 \ 3 \ 4 \ 4 \ 4)
 18.     test_loom, test_col(test_col) correct_looms(correct_looms)
 19. end

. 
. program test_odd_number_even_by_group
  1.     qui set obs 12
  2.     qui gen groupvar = 1 if _n < 7
  3.     qui replace groupvar = 2 if _n >= 7
  4.     
.     matrix test_col1 = (1 \ 2 \ . \ 4 \ . \ 6)
  5.     matrix test_col2 = (1 \ . \ 3 \ . \ 5 \ 6)
  6.     matrix correct_looms1 = (4 \ 4 \ 3 \ 2 \ 3 \ 2) 
  7.     matrix correct_looms2 = (5 \ 4 \ 5 \ 4 \ 3 \ 3)
  8.     matrix test_col = (test_col1 \ test_col2)
  9.     matrix correct_looms = (correct_looms1 \ correct_looms2)
 10.     test_loom, test_col(test_col) correct_looms(correct_looms) by(groupvar
> )
 11. 
.     matrix test_col1 = (1 \ 2 \ 3 \ 4 \ 5 \ 6)
 12.     matrix test_col2 = (1 \ 2 \ 3 \ 3 \ 5 \ 6)
 13.     matrix correct_looms1 = (4 \ 4 \ 4 \ 3 \ 3 \ 3) 
 14.     matrix correct_looms2 = (3 \ 3 \ 3 \ 3 \ 3 \ 3)
 15.     matrix test_col = (test_col1 \ test_col2)
 16.     matrix correct_looms = (correct_looms1 \ correct_looms2)
 17.     test_loom, test_col(test_col) correct_looms(correct_looms) by(groupvar
> )
 18. 
.     matrix test_col1 = (6 \ 4 \ 5 \ 2 \ 1 \ 3)
 19.     matrix test_col2 = (1 \ 2 \ 3 \ 4 \ 4 \ 6)
 20.     matrix correct_looms1 = (3 \ 3 \ 3 \ 4 \ 4 \ 4) 
 21.     matrix correct_looms2 = (4 \ 4 \ 4 \ 3 \ 3 \ 3)
 22.     matrix test_col = (test_col1 \ test_col2)
 23.     matrix correct_looms = (correct_looms1 \ correct_looms2)
 24.     test_loom, test_col(test_col) correct_looms(correct_looms) by(groupvar
> )
 25. 
.     drop groupvar
 26. end

. 
. program test_loom
  1.     syntax, test_col(name) correct_looms(name) [ by(varlist) ]
  2.     
.     qui svmat test_col, n(test_col)
  3.     qui svmat correct_looms, n(correct_looms)
  4.     if "`by'" == "" {
  5.         leave_one_out_median test_col, gen(calculated_looms)
  6.     }
  7.     else {
  8.     leave_one_out_median test_col, gen(calculated_looms) by(`by')
  9.     }
 10.     assert calculated_looms == correct_looms
 11.     drop test_col correct_looms calculated_looms
 12.     
.     di "Test passed"
 13. end

. 
. * EXECUTE
. main
Test passed
Test passed
Test passed
Test passed
Test passed
Test passed
Test passed
Test passed
Test passed
Test passed
Test passed
Test passed
Test passed
Test passed
Test passed
Test passed
Test passed
Test passed
Test passed
Test passed
Test passed

. 
end of do-file
